We think that a bunch of the code will fall out of SetupSampling.

Computations that depend on the ray direction could potentially be done in a vertex shader.

Computations that depend on the ray origin could be done once on the CPU. I did some aircoding looking at this specific case and pasted a possible version. It's already nice to lose some of the discrete math (finding the closest sample slice to start raymarching from).

If there is a significant portion of ray directions that won't be doing any sample slice blending, we could potentially submit geometry for these with a separate (simplified) shader which doesn't have the branch in the inner loop. It's not clear yet what this proportion will be and whether it will be worth doing or not.



	// this code doesn't do some of the ugly computations on ray origin/finding the nearest sample slice, but instead reads them from the CPU. note this is untested code.
	void SetupSampling( in float3 ro, in float3 rd, in float period, out float2 t, out float2 dt, out float2 wt, out float endFadeDist )
	{
		// ------------------------ FLOAT4 VERSION -----------------------------

		// passed in from CPU - offset to each of 4 slices
		// NOTE these are directional! they give the distance to the first slice, assuming the ray points in same direction as normal. this is taken into account below;
		float4 distsToFirstSlice;

		// DP with each slice normal
		float4 dps = float4( rd.x, rd.z, rd.x + rd.z, rd.x - rd.z );

		// take absolute value of dps and correct dist to first slice - see comment above
		for( int i = 0; i < 4; i++ ) if( dps[i] < 0. ) dps[i] *= -1., distsToFirstSlice[i] = period - distsToFirstSlice[i];

		int i_AA = dps[0] < dps[1]; // index of larger DP of first two. will produce 1 if second is bigger, otherwise 0 if first is bigger
		int i_DI = dps[2] < dps[3] + 2; // index of larger DP of second two.

		// start dists
		t = float2( distsToFirstSlice[i_AA] / dps[i_AA], distsToFirstSlice[i_DI] / dps[i_DI]);

		// step size - slice spacing divided by absolute dot product of ray dir and slice normal
		dt = period / float2( dps[i_AA], dps[i_DI] );

		// sample weights
		float minperiod = period;
		float maxperiod = .9*sqrt( 2. )*period; // .9 reduces blend overlap between slices
		wt = smoothstep( maxperiod, minperiod, dt );
		wt /= (wt.x + wt.y);

		// fade samples at far extent
		float f = .6; // magic number for now, derivation coming soon.
		endFadeDist = f*float( SAMPLE_COUNT )*period;

		// ------------------------ FLOAT4 VERSION -----------------------------
	}
